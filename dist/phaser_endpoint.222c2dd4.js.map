{"version":3,"sources":["scenes/ACTIVE_SCENE.js","scenes/LoadScene.js","scenes/MenuScene.js","scenes/MinimapScene.js","scenes/GameOverScene.js","phaser_endpoint.js"],"names":["ActiveScene","AvailableScenes","Load","Menu","Minimap","GameOver","Scene","LoadScene","key","Phaser","msg","console","log","loadBar","add","graphics","fillStyle","color","i","load","spritesheet","frameHeight","frameWidth","image","audio","on","percentage","fillRect","game","renderer","height","width","scene","start","MenuScene","sound","play","sys","config","setDepth","setScale","carmouse","sprite","setOrigin","setVisible","playButton","text","font","setShadow","setResolution","setInteractive","controls","HighlightBar","MinimapScene","player","health","_player","_text","_health","_score","_socialscore","_socialscorevalue","_lostGame","_phone","_data","_lastphoneEvent","_phoneEventTimer","_phonescreen_bg","_option1","_option2","_option3","_F11","_angularVel","_thrust","_solved","time","now","tilemapTiledJSON","map","make","tilemap","tileset","addTilesetImage","tileset2","collisionLayer","createDynamicLayer","setCollisionByProperty","canCollide","matter","world","convertTilemapLayer","thrust","fill","padding","x","y","backgroundColor","setScrollFactor","camera","cameras","main","startFollow","setBounds","healthvalue","event","bodyA","bodyB","Math","floor","random","setText","endGame","_question","setFontSize","option1_bar","setAlpha","option2_bar","option3_bar","phoneHighlight","delta","cursors","input","keyboard","addKeys","up","Input","Keyboard","KeyCodes","W","down","S","left","A","right","D","setFrictionAir","setMass","setFixedRotation","isDown","setAngularVelocity","onPhoneSubmit","q","o1","o2","o3","correct_o","_correct_o","tweens","targets","alpha","duration","ease","loop","option","highlight","GameOverScene","type","AUTO","parent","render","pixelArt","physics","default","gravity","Game"],"mappings":"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","file":"phaser_endpoint.222c2dd4.js","sourceRoot":"..","sourcesContent":["export const ActiveScene = {\r\n    AvailableScenes: {\r\n        Load: \"Load\",\r\n        Menu: \"Menu\",\r\n        Minimap: \"Minimap\",\r\n        GameOver: \"GameOver\"\r\n    }\r\n}","import { ActiveScene } from './ACTIVE_SCENE.js';\r\n\r\n// Load Scene\r\n/// Loads assets and Transfers over control to the Menu Scene\r\n\r\nexport class LoadScene extends Phaser.Scene{\r\n    constructor(){\r\n        super({\r\n            key: ActiveScene.AvailableScenes.Load\r\n        })\r\n    }\r\n\r\n    init(msg){\r\n        console.log(\"Load: \",msg);\r\n    }\r\n\r\n    preload(){\r\n\r\n        let loadBar = this.add.graphics({\r\n            fillStyle: {\r\n                color: 0xffffff\r\n            }\r\n        })\r\n\r\n        for(let i = 0; i< 100; i++)\r\n        {\r\n            this.load.spritesheet(\"grass_tiles\",\"../asset/spritesheet/grass_ss.png\" , {\r\n                frameHeight: 512,\r\n                frameWidth: 512\r\n            })\r\n\r\n            this.load.image('car', './asset/png/car/Car_1_Main_Positions/Car_Sprite.png');\r\n            this.load.image('menu_logo', './asset/menu/game-logo.png');\r\n            this.load.image('menu_bg', './asset/menu/menu-bg.png');\r\n\r\n            //this.load.image(\"tiles\", \"../dist/asset/spritesheet/roads2W.png\");\r\n            //this.load.tilemapTiledJSON(\"map\", \"../dist/asset/spritesheet/map_updated.json\");\r\n\r\n            //this.load.audio()\r\n            this.load.audio('menu_music', './asset/menu/Sci-fi Pulse Loop.mp3');\r\n        }\r\n\r\n        this.load.on(\"progress\", (percentage) => {\r\n                loadBar.fillRect(0, this.game.renderer.height / 2, this.game.renderer.width * percentage, 50);\r\n        })\r\n    }\r\n    \r\n\r\n    create(){\r\n        //this.scene.add(ActiveScene.AvailableScenes.Menu, MenuScene, false)\r\n        this.scene.start( ActiveScene.AvailableScenes.Menu, \"Load -> Menu\" );\r\n        \r\n    }\r\n}","import { ActiveScene } from './ACTIVE_SCENE.js';\r\n\r\n// Menu Scene\r\n/// Displays the Menu and shows options\r\n\r\nexport class MenuScene extends Phaser.Scene{\r\n    constructor(){\r\n        super({\r\n            key: ActiveScene.AvailableScenes.Menu\r\n        })\r\n    }\r\n\r\n    init(msg){\r\n        console.log(\"Menu: \" , msg);\r\n    }\r\n\r\n    preload(){\r\n    }\r\n\r\n    create(){\r\n        // Height and Width for screen\r\n        let menu_music = this.sound.play('menu_music');\r\n        //menu_music.setVolume(0.7);\r\n        const { width, height } = this.sys.game.config;\r\n\r\n        const logo = this.add.image(400, 150, 'menu_logo' ).setDepth(2);\r\n        logo.setScale(2);\r\n\r\n        let carmouse = this.add.sprite(250,310,'car');\r\n        carmouse.setScale(1/16).setOrigin(0).setVisible(false);\r\n\r\n        let playButton = //this.add.text(350,300, 'Play', { fontFamily: '\"Roboto Condensed\"' });\r\n        this.add\r\n        .text(350, 300 , \"Play\", {font: \"18px monospace\", color: \"white\"}).setShadow(5, 5, \"#5588EE\", 0, true, true);\r\n        playButton.setScale(3).setResolution(5);\r\n        playButton.setInteractive();\r\n        playButton.on(\"pointerover\", () => {\r\n            carmouse.setVisible(true);\r\n        })\r\n\r\n        playButton.on(\"pointerout\", () => {\r\n            carmouse.setVisible(false);\r\n        })\r\n\r\n        playButton.on(\"pointerup\", () => {\r\n            console.log(\"Start Game\");\r\n            this.scene.start( ActiveScene.AvailableScenes.Minimap, \"Menu -> Minimap\" );\r\n        })\r\n    }\r\n}","import { ActiveScene } from './ACTIVE_SCENE.js';\r\n\r\n\r\nlet controls;\r\nlet HighlightBar;\r\nexport class MinimapScene extends Phaser.Scene{\r\n    constructor(player = null, health = 100){\r\n        super({\r\n            key: ActiveScene.AvailableScenes.Minimap\r\n        })\r\n        this._player = player;\r\n        this._text = \"Health: 100%\";\r\n        this._health = health;\r\n        this._score = null;\r\n        this._socialscore = null;\r\n        this._socialscorevalue = 10;\r\n        this._lostGame = false;\r\n        this._phone = null;\r\n        this._data = [];\r\n        this._lastphoneEvent = null;\r\n        this._phoneEventTimer = null; \r\n        this._phonescreen_bg = null;\r\n        this._option1 = null;\r\n        this._option2 = null;\r\n        this._option3 = null;\r\n        this._F11 = null;\r\n        this._angularVel = 0.03;\r\n        this._thrust = 0.25;\r\n        this._solved = 0;\r\n    }\r\n\r\n    init(msg)\r\n    {\r\n        console.log(\"Minimap: \", msg );\r\n        this._text = \"Health: 100%\";\r\n        this._lastphoneEvent = this.time.now;\r\n        this._phoneEventTimer = 10;\r\n        this._socialscorevalue = 10;\r\n    }\r\n\r\n    preload()\r\n    {\r\n\r\n        this.load.image('menu_bg', './asset/menu/menu-bg.png');\r\n        //this.load.spritesheet('base_tiles_ss', './asset/spritesheet/tiles_spritesheet.png');\r\n        //this.load.atlas('base_map', './asset/spritesheet/tiles_spritesheet.png', 'asset/spritesheet/tiles_spritesheet.json');\r\n\r\n        this.load.image(\"roads2W\", \"./asset/spritesheet/roads2W.png\");\r\n        this.load.image(\"RPGTileset\", \"./asset/spritesheet/TilesetPyxel.png\");\r\n        this.load.tilemapTiledJSON(\"map\", \"./asset/spritesheet/map_updated.json\");\r\n\r\n        this.load.image(\"phone\", \"./asset/phone/mobile.png\");\r\n        this.load.image(\"screen_bg\", \"./asset/phone/bg.jpg\");\r\n        this.load.image(\"screen_bg\", \"./asset/phone/speech-bubble.png\");\r\n\r\n        HighlightBar = this.add.graphics({fillStyle: {color: 0xff4f1f}});\r\n    }\r\n\r\n    create()\r\n    {   \r\n        // Screen Data\r\n        const { width, height } = this.sys.game.config;\r\n\r\n        // Map Setup\r\n        const map = this.make.tilemap({ key: \"map\" });\r\n        const tileset = map.addTilesetImage(\"roads2W\", \"roads2W\");\r\n        const tileset2 = map.addTilesetImage(\"RPG TileSet\", \"RPGTileset\");\r\n\r\n        // Map rendered based on Layers \r\n        const baseLayer = map.createDynamicLayer(\"Map\", tileset, 0, 0).setScale(3);\r\n        const collisionLayer = map.createDynamicLayer(\"Trees\", tileset2, 0, 0).setScale(3);\r\n        const layer3 = map.createDynamicLayer(\"Bridge\", tileset2, 0, 0).setScale(3);\r\n        collisionLayer.setCollisionByProperty({ canCollide: true });\r\n\r\n        this.matter.world.convertTilemapLayer(collisionLayer);\r\n    \r\n\r\n        //collisionLayer.setDepth(2);\r\n        this._player = this.matter.add.image(450,150,'car').setScale(1/20);\r\n        this._player.thrust(0.1);\r\n        //this._player.setInertia(body,10);\r\n        \r\n        //this._F11 = this.input.keyboard.addKey(this.Keyboard.F11);  //Fix\r\n        this._score = this.add.text(16, 16, this._text, {\r\n                font: \"18px monospace\",\r\n                fill: \"#ffffff\",\r\n                padding: { x: 20, y: 10 },\r\n                backgroundColor: \"#050505\"\r\n            })\r\n            .setScrollFactor(0);\r\n\r\n        this._socialscore = this.add.text(16, 60, \"Social Score: 10/10\", {\r\n                font: \"18px monospace\",\r\n                fill: \"#ffffff\",\r\n                padding: { x: 20, y: 10 },\r\n                backgroundColor: \"#050505\"\r\n            })\r\n            .setScrollFactor(0);\r\n        \r\n        // Camera View Settings\r\n        const camera = this.cameras.main;\r\n        camera.startFollow(this._player);\r\n        camera.setBounds(0, 0, 2300, 1530);\r\n\r\n\r\n        // DEBUG Rules\r\n        // this.matter.world.createDebugGraphic();\r\n        // this.matter.world.drawDebug = false;\r\n        // this.input.keyboard.on(\"keydown_D\", event => {\r\n        //     this.matter.world.drawDebug = !this.matter.world.drawDebug;\r\n        //     this.matter.world.debugGraphic.clear();\r\n        // });\r\n\r\n        // Update Damage taken by player \r\n        let healthvalue = this._health;\r\n        this.matter.world.on('collisionstart', function (event, bodyA, bodyB) {\r\n            healthvalue = healthvalue - Math.floor(Math.random()*(8)+1);\r\n            if(healthvalue > 0 && this.scene._socialscorevalue > 0 )\r\n            {\r\n                this.scene._text = \"Health: \" + healthvalue + \"%\";\r\n                this.scene._score.setText(this.scene._text);    \r\n            } \r\n            else\r\n            {\r\n                // Game Over: Send to new Game Over scene\r\n                this.scene.endGame();\r\n            }\r\n        });\r\n\r\n\r\n        // Phone Graphic\r\n        /// We create a Container for the Phone \r\n        this._phone = this.add.image( width*0.85 , height*0.8 ,\"phone\").setScale(0.5).setDepth(10).setScrollFactor(0);\r\n        this._phonescreen_bg = this.add.image(width*0.85,height*0.85, 'screen_bg').setScale(0.9).setDepth(8).setScrollFactor(0);\r\n        this._question = this.add.text(width*0.75,height*0.6, \"Wanna Hangout?\", {\r\n            font: \"15px monospace\",\r\n            fill: \"#ffffff\",padding: { x: 15, y: 10 },backgroundColor: \"#000000\"}).setDepth(11).setScrollFactor(0).setResolution(10);\r\n        this._option1 = this.add.text(width*0.78,height*0.7, 'Bye').setFontSize(15).setDepth(11).setScrollFactor(0);\r\n        this._option2 = this.add.text(width*0.78,height*0.8, 'I Dont Care').setFontSize(15).setDepth(11).setScrollFactor(0);\r\n        this._option3 = this.add.text(width*0.78,height*0.9, 'Maybe').setFontSize(15).setDepth(11).setScrollFactor(0);\r\n\r\n        \r\n        let option1_bar = HighlightBar.fillRect(width*0.78,height*0.69, 300 , 30).setAlpha(0).setDepth(10);\r\n        let option2_bar = HighlightBar.fillRect(width*0.78,height*0.79, 300 , 30).setAlpha(0).setDepth(10);\r\n        let option3_bar = HighlightBar.fillRect(width*0.78,height*0.89, 300 , 30).setAlpha(0).setDepth(10);\r\n            \r\n        this._lastphoneEvent = this.time.now;\r\n\r\n        this._phone.setAlpha(0);\r\n        this._phonescreen_bg.setAlpha(0);\r\n        this._question.setAlpha(0);\r\n        this._option1.setAlpha(0);\r\n        this._option2.setAlpha(0);\r\n        this._option3.setAlpha(0);\r\n          \r\n\r\n        //Interactive Setup\r\n        this.phoneHighlight(this._option1, option1_bar);\r\n        this.phoneHighlight(this._option2, option2_bar);\r\n        this.phoneHighlight(this._option3, option3_bar);\r\n\r\n\r\n        \r\n        //let timedEvent = this.time.now;\r\n        //console.log(timedEvent);\r\n\r\n        \r\n        \r\n        //delayedCall(3000, this.onPhoneSubmit, [], this);\r\n\r\n\r\n    }\r\n\r\n    update(time, delta)\r\n    {\r\n        //this._player.thrust(1);\r\n        //controls.update(delta);\r\n        let cursors = this.input.keyboard.addKeys({up:Phaser.Input.Keyboard.KeyCodes.W,down:Phaser.Input.Keyboard.KeyCodes.S,left:Phaser.Input.Keyboard.KeyCodes.A,right:Phaser.Input.Keyboard.KeyCodes.D});\r\n        const { width, height } = this.sys.game.config;\r\n\r\n        //this._player.setVelocity(0);\r\n        //this._player.velocity.normalize().scale(playerSpeed);\r\n\r\n        this._player.setFrictionAir(0.15);\r\n        this._player.setMass(100);\r\n        this._player.setFixedRotation();\r\n\r\n        // Forward Motion \r\n        if (cursors.up.isDown)\r\n        {\r\n            this._player.thrust(this._thrust);\r\n        }\r\n        else if (cursors.down.isDown)\r\n        {\r\n            this._player.thrust(-this._thrust*0.8);\r\n        }\r\n\r\n\r\n        // Turning Motion\r\n        if (cursors.left.isDown)\r\n        {\r\n            this._player.setAngularVelocity( - this._angularVel);   \r\n        }\r\n        else if (cursors.right.isDown)\r\n        {\r\n            this._player.setAngularVelocity( this._angularVel);\r\n        }\r\n        // if(this._F11.isDown)\r\n        // {\r\n        //     /**\r\n        //      * this._map.height = window.screen.height;\r\n        //      * this._map.width = window.screen.width;\r\n        //      */\r\n        // }\r\n\r\n\r\n        // Timer Setup for Phone Events\r\n        if(this.time.now - (this._lastphoneEvent + this._phoneEventTimer*1000) > 0)\r\n        {\r\n            let i = this._solved;\r\n            console.log(i);\r\n            switch(i)\r\n            {\r\n                case 0:  this.onPhoneSubmit(\"How was your day?\", \"💩\" , \"💩\" , \"😀\", \"😀\"); break;\r\n                case 1:  this.onPhoneSubmit(\"Wanna Go Out?\", \"With U?😂\" , \"💩\" , \"Yes!\", \"Yes!\"); break;\r\n                case 2:  this.onPhoneSubmit(\"I'm Leaving You?\", \"Okay\" , \"Lmao\" , \"NO\", \"NO\"); break;\r\n                default: i = 0;\r\n            }\r\n            this._solved = i+1;\r\n\r\n        }\r\n        else\r\n        {\r\n            //Nothing\r\n        }\r\n\r\n\r\n        // Lose if Score too low \r\n        if(this._socialscorevalue <= 0)\r\n        {\r\n            this.endGame();\r\n        }\r\n\r\n    }\r\n\r\n    endGame() {\r\n        this.scene.start( ActiveScene.AvailableScenes.GameOver, \"Minimap -> Game Over\" );\r\n    }\r\n\r\n    onPhoneSubmit (q, o1, o2, o3, correct_o)\r\n    {\r\n        this._question.setText(q).setResolution(1);\r\n        this._option1.setText(o1).setResolution(1);\r\n        this._option2.setText(o2).setResolution(1);\r\n        this._option3.setText(o3).setResolution(1);\r\n        this._correct_o = (correct_o);\r\n\r\n        console.log(\"Phone Event Triggerrred\");\r\n        this._lastphoneEvent = this.time.now;\r\n        if(this._phoneEventTimer - 1 > 5)\r\n        {\r\n            // Fade In Phone Overlay\r\n            this.tweens.add({targets: this._phone,alpha: 1,duration: 2000,ease: 'Power2'}, this);\r\n            this.tweens.add({targets: this._phonescreen_bg,alpha: 1,duration: 2000,ease: 'Power2'}, this);\r\n            this.tweens.add({targets: this._question,alpha: 1,duration: 1000,ease: 'Power2', loop: 1}, this);\r\n            this.tweens.add({targets: this._option1,alpha: 1,duration: 1000,ease: 'Power2', loop: 1}, this);\r\n            this.tweens.add({targets: this._option2,alpha: 1,duration: 1000,ease: 'Power2', loop: 1}, this);\r\n            this.tweens.add({targets: this._option3,alpha: 1,duration: 1000,ease: 'Power2', loop: 1}, this);\r\n\r\n            this._phoneEventTimer -= 1;\r\n        }\r\n        else \r\n        {\r\n            //Do Nothing\r\n            // Fade In Phone Overlay\r\n            this.tweens.add({targets: this._phone,alpha: 1,duration: 1000,ease: 'Power2'}, this);\r\n            this.tweens.add({targets: this._phonescreen_bg,alpha: 1,duration: 1000,ease: 'Power2'}, this);\r\n            this.tweens.add({targets: this._question,alpha: 1,duration: 1000,ease: 'Power2',loop: -1}, this);\r\n            this.tweens.add({targets: this._option1,alpha: 1,duration: 1000,ease: 'Power2', loop: 1}, this);\r\n            this.tweens.add({targets: this._option2,alpha: 1,duration: 1000,ease: 'Power2', loop: 1}, this);\r\n            this.tweens.add({targets: this._option3,alpha: 1,duration: 1000,ease: 'Power2', loop: 1}, this);\r\n            console.log(\"Fastest Speed\");\r\n        }\r\n        \r\n\r\n        \r\n    }\r\n\r\n    phoneHighlight(option, highlight) \r\n    {\r\n\r\n        option.setInteractive();\r\n        option.on(\"pointerover\", () => {\r\n            option.setScale(1.5);\r\n        })\r\n\r\n        option.on(\"pointerout\", () => {\r\n            option.setScale(2/3);\r\n        })\r\n\r\n        option.on(\"pointerup\", () => {\r\n            \r\n            // Submission Check\r\n            console.log(\"Submission\", option._text);\r\n            this._phone.setAlpha(0);\r\n            this._phonescreen_bg.setAlpha(0);\r\n            this._question.setAlpha(0);\r\n            this._option1.setAlpha(0);\r\n            this._option2.setAlpha(0);\r\n            this._option3.setAlpha(0);\r\n\r\n            // Difficulty Increased\r\n            this._angularVel = this._angularVel + 0.04/3;\r\n            this._thrust = this._thrust + 0.3/3;\r\n\r\n            if(this._correct_o !== option._text)\r\n            {\r\n                this._socialscorevalue -= 5; \r\n                this._socialscore.setText(\"Social Score: \" + this._socialscorevalue + \"/10\");    \r\n            }\r\n        })\r\n    }\r\n\r\n}","import { ActiveScene } from './ACTIVE_SCENE.js';\r\n\r\n// Menu Scene\r\n/// Displays the Menu and shows options\r\n\r\nexport class GameOverScene extends Phaser.Scene{\r\n    constructor(){\r\n        super({\r\n            key: ActiveScene.AvailableScenes.GameOver\r\n        })\r\n    }\r\n\r\n    init(msg){\r\n        console.log(\"GameOver: \",msg);\r\n    }\r\n\r\n    preload(){\r\n    }\r\n\r\n    create(){\r\n        // Height and Width for screen\r\n        const { width, height } = this.sys.game.config;\r\n\r\n        const logo = this.add.image(400, 150, 'menu_logo' ).setDepth(2);\r\n        logo.setScale(2);\r\n\r\n        let carmouse = this.add.sprite(300,300,'car');\r\n        carmouse.setScale(1/16).setOrigin(0).setVisible(false);\r\n\r\n        let playButton = //this.add.text(350,300, 'Play', { fontFamily: '\"Roboto Condensed\"' });\r\n        this.add\r\n        .text(220, 300 , \"Play Again!\", {font: \"18px monospace\", color: \"white\"}).setShadow(5, 5, \"#5588EE\", 0, true, true);\r\n        playButton.setScale(3).setResolution(5);\r\n        playButton.setInteractive();\r\n        playButton.on(\"pointerover\", () => {\r\n            carmouse.setVisible(true);\r\n        })\r\n\r\n        playButton.on(\"pointerout\", () => {\r\n            carmouse.setVisible(false);\r\n        })\r\n\r\n        playButton.on(\"pointerup\", () => {\r\n            console.log(\"Start Game\");\r\n            this.scene.start( ActiveScene.AvailableScenes.Menu, \"GameOver -> Menu\" );\r\n        })\r\n    }\r\n}","import { LoadScene } from './scenes/LoadScene';\r\nimport { MenuScene } from './scenes/MenuScene';\r\nimport { MinimapScene } from './scenes/MinimapScene';\r\nimport { GameOverScene } from './scenes/GameOverScene';\r\n\r\nconst config = {\r\n    type: Phaser.AUTO, // Which renderer to use\r\n    width: 800, // Canvas width in pixels\r\n    height: 600, // Canvas height in pixels\r\n    backgroundColor: '#f09020',\r\n    parent: \"game-container\",\r\n    scene: [\r\n      LoadScene, \r\n      MenuScene,\r\n      MinimapScene,\r\n      GameOverScene\r\n    ],\r\n    render:{\r\n      pixelArt: true\r\n    },\r\n    physics: {\r\n      default: \"matter\",\r\n      matter: {\r\n        gravity: { x: 0, y: 0 } // 2D Game does not need Gravity\r\n      }\r\n    }\r\n  };\r\n  \r\n  const game = new Phaser.Game(config);\r\n  \r\n  // function preload() {\r\n  //   // Runs once, loads up assets like images and audio\r\n  //   this.load.image(\"grass\", \"./asset/png/tile/Background_Tiles/Grass_Tile.png\");\r\n  //   //this.load.image(\"grass-tiles\", \"../spritesheet/grass_ss.png\");\r\n  //   this.load.tilemap(\"grass-tiles\", \"../spritesheet/grass_ss.png\",32,32);\r\n\r\n  //   this.load.image('car', './assets/png/car/Car_1_Main_Positions/Car_1_01.png');\r\n  //   this.load.tilemapTiledJSON('map', './spritesheet/grass_ss.json');\r\n  //   this.load.image('tiles1', 'assets/tilemaps/tiles/super-mario.png');\r\n  // }\r\n  \r\n  // function create() {\r\n  //   // Runs once, after all assets in preload are loaded\r\n  //   const level = [\r\n  //       [  0,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0 ],\r\n  //       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 ],\r\n  //       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 ],\r\n  //       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 ],\r\n  //       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 ],\r\n  //       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 ],\r\n  //       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 ],\r\n  //       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 ],\r\n  //       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 ],\r\n  //       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 ],\r\n  //       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 ]\r\n  //     ];\r\n\r\n  //     map = game.add.tilemap('map');\r\n      \r\n\r\n  //     var background = this.add.sprite(0, 0, \"grass\", \"./asset/png/tile/Grass_Tile (2).png\");\r\n  //     const map = this.make.tilemap({ data: level, tileWidth: 50, tileHeight: 50 });\r\n  //     const tiles = map.addTilesetImage(\"grass-tiles\");\r\n  //     const layer = map.createStaticLayer(0, tiles, 0, 0);\r\n  //     //background.setScale(3, 2.4);\r\n  // }\r\n  \r\n  // function update(time, delta) {\r\n  //   // Runs once per frame for the duration of the scene\r\n  // }"]}